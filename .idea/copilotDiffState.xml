<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/obsidianite/notes.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/obsidianite/notes.py" />
              <option name="originalContent" value="from pathlib import Path&#10;from .note import Note&#10;&#10;class Notes:&#10;    def __init__(self, filepath: str):&#10;        self.notes = []&#10;        p = Path(filepath)&#10;        if not p.exists():&#10;            raise FileNotFoundError(f&quot;Datei nicht gefunden: {filepath}&quot;)&#10;        md_files = list(p.rglob(&quot;*.md&quot;))&#10;        for md_file in md_files:&#10;            self.notes.append(Note.load(md_file.__str__()))&#10;&#10;    def __repr__(self) -&gt; str:&#10;        return &quot;\n&quot;.join([note.dump() for note in self.notes])" />
              <option name="updatedContent" value="from pathlib import Path&#10;from .note import Note&#10;&#10;class Notes:&#10;    def __init__(self, filepath: str):&#10;        &quot;&quot;&quot;&#10;        Initialize the Notes collection by loading all markdown (.md) files from the given directory path.&#10;        Args:&#10;            filepath (str): The path to the directory containing markdown files.&#10;        Raises:&#10;            FileNotFoundError: If the provided directory does not exist.&#10;        &quot;&quot;&quot;&#10;        self.notes = []&#10;        p = Path(filepath)&#10;        if not p.exists():&#10;            raise FileNotFoundError(f&quot;Datei nicht gefunden: {filepath}&quot;)&#10;        md_files = list(p.rglob(&quot;*.md&quot;))&#10;        for md_file in md_files:&#10;            self.notes.append(Note.load(md_file.__str__()))&#10;&#10;    def __repr__(self) -&gt; str:&#10;        &quot;&quot;&quot;&#10;        Return a string representation of all notes in the collection.&#10;        Returns:&#10;            str: A string with each note's dump output separated by newlines.&#10;        &quot;&quot;&quot;&#10;        return &quot;\n&quot;.join([note.dump() for note in self.notes])" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/tests/test_note.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/tests/test_note.py" />
              <option name="originalContent" value="from obsidianite import Note&#10;import os&#10;&#10;def test_note_creation() -&gt; Note:&#10;    note = Note(&quot;test&quot;,&quot;# Test&quot;,{&quot;kind&quot;:&quot;test&quot;},&quot;.&quot;)&#10;    assert note.content == &quot;# Test&quot;&#10;    assert note.properties == {&quot;kind&quot;: &quot;test&quot;}&#10;    assert note.title == &quot;test&quot;&#10;    assert note.path == &quot;.&quot;&#10;&#10;def test_note_save() -&gt; None:&#10;    note = Note(&quot;test&quot;,&quot;# Test&quot;,{&quot;kind&quot;:&quot;test&quot;},&quot;.&quot;)&#10;    note.save()&#10;    assert os.path.exists(os.path.join(note.path, note.title + &quot;.md&quot;))&#10;&#10;def test_note_load() -&gt; None:&#10;    note = Note.load(&quot;test.md&quot;)&#10;    assert note.content == &quot;# Test&quot;&#10;    assert note.properties == {&quot;kind&quot;: &quot;test&quot;}&#10;    assert note.title == &quot;test&quot;&#10;    assert note.path == &quot;.&quot;&#10;&#10;def test_note_render() -&gt; None:&#10;    note = Note(&quot;test&quot;,&quot;# Test&quot;,{&quot;kind&quot;:&quot;test&quot;},&quot;.&quot;)&#10;    assert note.render() == &quot;---\nkind: test\n---\n# Test&quot;&#10;&#10;def test_note_cleanup() -&gt; None:&#10;    os.remove(&quot;test.md&quot;)&#10;    assert not os.path.exists(&quot;test.md&quot;)" />
              <option name="updatedContent" value="from obsidianite import Note&#10;import os&#10;&#10;def test_note_creation() -&gt; Note:&#10;    &quot;&quot;&quot;&#10;    Test the creation of a Note object and verify its attributes.&#10;    Returns:&#10;        Note: The created Note object.&#10;    &quot;&quot;&quot;&#10;    note = Note(&quot;test&quot;,&quot;# Test&quot;,{&quot;kind&quot;:&quot;test&quot;},&quot;.&quot;)&#10;    assert note.content == &quot;# Test&quot;&#10;    assert note.properties == {&quot;kind&quot;: &quot;test&quot;}&#10;    assert note.title == &quot;test&quot;&#10;    assert note.path == &quot;.&quot;&#10;    return note&#10;&#10;def test_note_save() -&gt; None:&#10;    &quot;&quot;&quot;&#10;    Test saving a Note object to a markdown file and check if the file exists.&#10;    &quot;&quot;&quot;&#10;    note = Note(&quot;test&quot;,&quot;# Test&quot;,{&quot;kind&quot;:&quot;test&quot;},&quot;.&quot;)&#10;    note.save()&#10;    assert os.path.exists(os.path.join(note.path, note.title + &quot;.md&quot;))&#10;&#10;def test_note_load() -&gt; None:&#10;    &quot;&quot;&quot;&#10;    Test loading a Note object from a markdown file and verify its attributes.&#10;    &quot;&quot;&quot;&#10;    note = Note.load(&quot;test.md&quot;)&#10;    assert note.content == &quot;# Test&quot;&#10;    assert note.properties == {&quot;kind&quot;: &quot;test&quot;}&#10;    assert note.title == &quot;test&quot;&#10;    assert note.path == &quot;.&quot;&#10;&#10;def test_note_render() -&gt; None:&#10;    &quot;&quot;&quot;&#10;    Test rendering a Note object to a markdown string with YAML front matter.&#10;    &quot;&quot;&quot;&#10;    note = Note(&quot;test&quot;,&quot;# Test&quot;,{&quot;kind&quot;:&quot;test&quot;},&quot;.&quot;)&#10;    assert note.render() == &quot;---\nkind: test\n---\n# Test&quot;&#10;&#10;def test_note_cleanup() -&gt; None:&#10;    &quot;&quot;&quot;&#10;    Test cleanup by removing the test markdown file and verifying its removal.&#10;    &quot;&quot;&quot;&#10;    os.remove(&quot;test.md&quot;)&#10;    assert not os.path.exists(&quot;test.md&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/tests/test_notes.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/tests/test_notes.py" />
              <option name="originalContent" value="import os&#10;import pytest&#10;from pathlib import Path&#10;from obsidianite import Notes, Note&#10;&#10;def test_notes_creation() -&gt; None:&#10;    notes = Notes(os.path.join(Path(__file__).parent, &quot;data/vault&quot;))&#10;    assert isinstance(notes.notes,list)&#10;    assert len(notes.notes) == 2&#10;    assert isinstance(notes.notes[0],Note)" />
              <option name="updatedContent" value="import os&#10;import pytest&#10;from pathlib import Path&#10;from obsidianite import Notes, Note&#10;&#10;def test_notes_creation() -&gt; None:&#10;    &quot;&quot;&quot;&#10;    Test the creation of a Notes collection from a directory and verify its contents.&#10;    Asserts that the notes attribute is a list, contains two notes, and that the first note is an instance of Note.&#10;    &quot;&quot;&quot;&#10;    notes = Notes(os.path.join(Path(__file__).parent, &quot;data/vault&quot;))&#10;    assert isinstance(notes.notes,list)&#10;    assert len(notes.notes) == 2&#10;    assert isinstance(notes.notes[0],Note)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>