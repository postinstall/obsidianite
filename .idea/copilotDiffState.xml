<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/obsidianite/notes.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/obsidianite/notes.py" />
              <option name="originalContent" value="from pathlib import Path&#10;from .note import Note&#10;&#10;class Notes:&#10;    def __init__(self, filepath: str):&#10;        self.notes = []&#10;        p = Path(filepath)&#10;        if not p.exists():&#10;            raise FileNotFoundError(f&quot;Datei nicht gefunden: {filepath}&quot;)&#10;        md_files = list(p.rglob(&quot;*.md&quot;))&#10;        for md_file in md_files:&#10;            self.notes.append(Note.load(md_file.__str__()))&#10;&#10;    def __repr__(self) -&gt; str:&#10;        return &quot;\n&quot;.join([note.dump() for note in self.notes])" />
              <option name="updatedContent" value="from pathlib import Path&#10;from .note import Note&#10;&#10;class Notes:&#10;    def __init__(self, filepath: str):&#10;        &quot;&quot;&quot;&#10;        Initialize the Notes collection by loading all markdown (.md) files from the given directory path.&#10;        Args:&#10;            filepath (str): The path to the directory containing markdown files.&#10;        Raises:&#10;            FileNotFoundError: If the provided directory does not exist.&#10;        &quot;&quot;&quot;&#10;        self.notes = []&#10;        p = Path(filepath)&#10;        if not p.exists():&#10;            raise FileNotFoundError(f&quot;Datei nicht gefunden: {filepath}&quot;)&#10;        md_files = list(p.rglob(&quot;*.md&quot;))&#10;        for md_file in md_files:&#10;            self.notes.append(Note.load(md_file.__str__()))&#10;&#10;    def __repr__(self) -&gt; str:&#10;        &quot;&quot;&quot;&#10;        Return a string representation of all notes in the collection.&#10;        Returns:&#10;            str: A string with each note's dump output separated by newlines.&#10;        &quot;&quot;&quot;&#10;        return &quot;\n&quot;.join([note.dump() for note in self.notes])" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>